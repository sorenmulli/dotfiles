snippet impnp "Import numpy"
import numpy as np

endsnippet

snippet impdata "Import like a real data scientist TM"
import numpy as np
import torch
import torch.nn as nn

import matplotlib.pyplot as plt

import pandas as pd
import seaborn as sb

endsnippet

snippet rest "Docstring in rest format"
"""${1:Description}

:param ${2:type param}:  ${3:Argument}
:return: ${4:Answer}
:rtype: ${5:bool}
"""
endsnippet

############## EVERYTHING BELOW THIS LINE COPIED FROM https://github.com/honza/vim-snippets

snippet #!
#!/usr/bin/env python3

endsnippet
snippet imp
import ${0:module}

endsnippet

snippet from
from ${1:package} import ${0:module}

endsnippet

# Module Docstring
snippet docs
"""
File: ${1:`!p snips.rv = snip.fn`}
:Version: 1
:Authors: 
	-`g:snips_author`, `g:snips_email`
:Github: `g:snips_github`
:Description: ${0}
"""
endsnippet


snippet wh
while ${1:condition}:
	${0:${VISUAL}}
endsnippet


snippet with
with ${1:expr} as ${2:var}:
	${0:${VISUAL}}
endsnippet

# New Class
snippet cl
class ${1:ClassName}(${2}):
	"""${3:docstring for $1}"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.$4 = $4
		${0}
endsnippet

snippet cla
class ${1:class_name}:
	"""${0:description}"""
endsnippet

snippet clai
class ${1:class_name}:
	"""${2:description for $1}"""
	def __init__(self, ${3:args}):
		${0}
endsnippet

# New Function

snippet def
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	${0}
endsnippet


# New Method
snippet defi
def __init__(self, ${1:args}):
	${0}
endsnippet

snippet defm
def ${1:mname}(self, ${2:arg}):
	${0}
endsnippet


# For
snippet for
for ${1:item} in ${2:items}:
	${0}
endsnippet


# Lambda
snippet ld
${1:var} = lambda ${2:vars} : ${0:action}
endsnippet

snippet ret
return ${0}
endsnippet

snippet .
self.
endsnippet

snippet sa "self.attribute = attribute"
self.${1:attribute} = $1
endsnippet


snippet try "Try/Except"
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${0:raise $3}
endsnippet

snippet trye "Try/Except/Else"
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${0}
endsnippet

snippet tryf "Try/Except/Finally"
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${0}
endsnippet

snippet tryef "Try/Except/Else/Finally"
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5}
finally:
	${0}
endsnippet

# if __name__ == '__main__':
snippet ifmain
if __name__ == '__main__':
	${0:main()}
endsnippet


snippet "
"""${0:doc}
"""
endsnippet



# comprehensions
snippet lcp "list comprehension"
[${1} for ${2} in ${3:${VISUAL}}]${0}
endsnippet


snippet dcp "dict comprehension"
{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}
endsnippet


snippet scp "set comprehension"
{${1} for ${2} in ${3:${VISUAL}}}${0}
endsnippet


snippet repr "methods implementing string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:pass}
endsnippet





